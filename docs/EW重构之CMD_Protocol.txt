CMD_Protocol.h CMD_Protocol.c

#define PROTO_INIT_CMD_SER_ERROR        0
#define PROTO_INIT_CMD_SER_OK           1
#define PROTO_INIT_CMD_RCSOCKET_ERROR  -1
#define PROTO_GET_RCSOCKET_ERROR       -1
#define PROTO_UNDERSTAND_ERROR         -2
#define PROTO_UNDERSTAND_BUT_DO_ERROR  -1
#define proto_UNDERSTAND_AND_DO_OK      1 
#define PRO_SEND_RCCMD_ERROR           -1
#define PRO_SEND_RCCMD_OK               1



///// 协议内容
#define UNKOWN_MSG                  0
#define PRO_MAKE_NET                1
    #define READ_ERROR_PLEASE_SAY_AGAIN 0   // 服务器没理解，重说一遍
    #define I_AM_NEW_RC_CMD_SOCK_CLIENT 1   // 新主机反向连接请求
    #define CONFIRM_YOU_ARE_SOCK_CLIENT 2   // 新主机连接确认
    #define I_AM_NEW_RC_SOCK_FOR_TUNNEL 3   // 新隧道反向连接请求
    	// 新隧道要带 POOLNUM 
    #define CONFIRM_YOU_ARE_SOCK_TUNNEL 4   // 新隧道连接确认
#define PRO_BROAD_MSG               2


+-----------------+------------------------------+---------------------+
| 命令属性(1byte)  |  命令内容 (1byte)            |  命令参数 (18byte)   |
+-----------------+------------------------------+---------------------+
| 组网消息        | I_AM_NEW_RC_CMD_SOCK_CLIENT  |    NULL             |
| PRO_MAKE_NET    | I_AM_NEW_RC_SOCK_FOR_TUNNEL  |    POOLNUM         |
|                 | READ_ERROR_PLEASE_SAY_AGAIN  |                    |
+-----------------+------------------------------+--------------------+
| 广播消息        |  下一版本添加内容，用于广播命令|                    |
| PRO_BROAD_MSG   |                              |                    |
+-----------------+------------------------------+---------------------+
| 微控操作
|（下一版本
| 内容方便操
|作特定主机）
+-----------------------------------------------------------------------
|其他    
| UNKOWN_MSG
+-----------------------------------------------------------------------


		int proto_init_cmd_server_for_rc(int port)
			// 1. 初始化时，监听一个端口，等待init_cmd_rcsocket的连接
			// 2. 当有cmd连接后，将cmd_sock上抛，随后等待被控机反向连接。
			// 3. 当有被控机连接时调用 understand_and_do_it(sock) 函数，解析协议并执行
			#define PROTO_INIT_CMD_SER_ERROR  0
			#define PROTO_INIT_CMD_SER_OK     1
			
		int proto_init_cmd_rcsocket(char *URL,int port)
			// 1. 向服务器 发送 连接请求
			// 2. 服务器 回复 OK消息
			#define PROTO_INIT_CMD_RCSOCKET_ERROR  -1
			   // 非错误，就是正确的 socket
		int proto_get_rcsocket(char *URL,int port,int poolnum)
			// 1. 连接服务器并发送 pool_number
			#define PROTO_GET_RCSOCKET_ERROR   -1
			   // 非错误，就是正确的 socket
		int proto_understand_and_do_it(sock)
			//  解析协议并执行具体的处理操作（当前版本只有绑定会话功能）。
			#define PROTO_UNDERSTAND_ERROR         -2  // 理解不了就让客户端重发
			#define PROTO_UNDERSTAND_BUT_DO_ERROR  -1  // 理解了但是做不了，告诉客户端不支持
			#define proto_UNDERSTAND_AND_DO_OK      1  // 理解了也执行了，那就成功了。

		int proto_send_rccmd_poolnum(int sock,int poolnum)
			#define PRO_SEND_RCCMD_ERROR   -1
			#define PRO_SEND_RCCMD_OK       1